
import Server
from ServerParallel import Server_Parallel
from ServerSequential import Server_Sequential
#import ServerParallel
from Exponential import ExponentialClass
import numpy as np
import pandas as pd
from SimLogic import Simulation

class Test():

    def __init__(self):

        s1 = Server_Parallel(
            0,
            "Paralelo",
            "Exponencial",
            "Exponencial",
            "Si",
            5,
            [0.8269462191579571, 0.239525767902085, 0.3823231780462657, 0.49944704482097935, 0.6245144644559243, 0.7572783680059306, 0.9323915072507146, 1.1379815570619316, 1.4291154789104101, 1.8925874211041058, 2.897761764139392, 0.03289897191015132, 0.10482695847506603, 0.17386468866432586, 0.25128259545718895, 0.3303497372717449, 0.4200416092071871, 0.5260271428704675, 0.6395639079728932, 0.772100097216132, 0.9355287486825147, 1.131157059966633, 1.4077160085182976, 1.8480335178934275, 3.0660730236950897, 0.043473994283616306, 0.11794578581351889, 0.187832183861837, 0.26018102236808094, 0.34237858028941104, 0.43248346541619154, 0.5373074778961459, 0.6562938238376258, 0.7960432199879564, 0.9579090996294661, 1.1669891466026183, 1.4649032301481408, 1.8843281420895983, 2.790469305013637, 0.02884934475439589, 0.0904307458852165, 0.15710970760645662, 0.2283726633685768, 0.3055983049112543, 0.39302503521355253, 0.48856281653346045, 0.5990415151015707, 0.7292343767825076, 0.8793014693490452, 1.0639092278857278, 1.298242004556941, 1.6280013498349801, 2.182062112963757, 4.883010594086139, 0.08498068036770048, 0.19875157425419476, 0.32189515718597217, 0.47568479837297306, 0.6687094328361659, 0.9612646072236453, 1.3756184021635798, 1.7664601752981732, 2.6829354833224084, 0.028759298782866264, 0.09556913284427772, 0.16554447451554966, 0.24481229173579033, 0.3320900861980616, 0.4320177716604342, 0.5441270910768017, 0.6713739827331882, 0.8234172493905084, 1.0117263582981688, 1.3086720056662922, 1.6787254976139014, 2.3340955275605277, 0.010528844441250084, 0.07651369941993288, 0.14620730426723888, 0.22216373424364733, 0.3050666860501295, 0.39580464523286535, 0.5006710162815251, 0.6179580403103159, 0.7580390767583294, 0.9233557469303483, 1.132556148143456, 1.414886840430353, 1.8464866988953055, 2.896704141886466, 0.03597799434593626, 0.10395456895358479, 0.17555366229153418, 0.25567624856388427, 0.34273428331176914, 0.4384241410283236, 0.5458286851559934, 0.6732542077081406, 0.8187294932465241],
            [1.6426883638707603, 0.24438018975522946, 0.2987593187598013, 0.3384438446720493, 0.3778762777997182, 0.4199060645725806, 0.46437743055847114, 0.5103887352871572, 0.5598729928216551, 0.6134447507245012, 0.6709435880839485, 0.7309154185144222, 0.7944109804217231, 0.8696545774795101, 0.9531094131428018, 1.0470193933536178, 1.1559182063425402, 1.2990207371342823, 1.4730132299871128, 1.7007495340999654, 2.055816060344933, 2.8771958176202714, 0.012441747066421462, 0.03855301864573076, 0.061298240442650295, 0.08472254596737507, 0.11149925150826347, 0.13688682620709502, 0.16178818545157903, 0.18923408206109485, 0.21770668905496965, 0.24770696960756294, 0.2793353091100018, 0.3125725899250708, 0.346965773041428, 0.3819983819612019, 0.4214538490244367, 0.46071048207766085, 0.5015821853511422, 0.5481568220865642, 0.5980521246720669, 0.6522358155835732, 0.7106552332364531, 0.7763931812885443, 0.8471135702535687, 0.925796662110868, 1.015479304659421, 1.1221842173314736, 1.2459618291989063, 1.4002107623915245, 1.6212484183860116, 2.0039680549282233, 2.841017248445479, 0.013063096036475633, 0.03637201641248316, 0.05963481198548082, 0.08340757718038073, 0.10774665886573684, 0.13368363344266448, 0.16490017281737024, 0.19237969034438085, 0.22128795725348466, 0.2513622505415289, 0.2832165712176302, 0.316082608866362, 0.35080341837449014, 0.3872831073322044, 0.42606289811670683, 0.46663944391210044, 0.5110584306820435, 0.5579022158990822, 0.608742891497235, 0.6636137613757103, 0.7360525043902194, 0.801034465024955, 0.8748413090176967, 0.959122824838951, 1.0493233974099363, 1.1599384384147564, 1.2923769530332196, 1.4598642931852661, 1.6826451767660755, 2.0155413049071544, 2.7036766648370705, 0.009517333608995525, 0.03184064881881786, 0.0550167592803452, 0.0780708636757767, 0.10227923704428583, 0.1326376955268734, 0.15983351574366833, 0.18748071734417407, 0.2160500510661567, 0.24608737543515408, 0.27763712561093457, 0.3101642825130255, 0.3446839062550873, 0.381421774624391, 0.41949962669686164],
            1,
            2,
            True,
            ExponentialClass(lambdaValue=1.1),
            ExponentialClass(lambdaValue=1.2)
        )

        s2 = Server_Sequential(
            1,
            "Serie",
            "Exponencial",
            "Exponencial",
            "Si",
            5,
            [0.8269462191579571, 0.239525767902085, 0.3823231780462657, 0.49944704482097935, 0.6245144644559243, 0.7572783680059306, 0.9323915072507146, 1.1379815570619316, 1.4291154789104101, 1.8925874211041058, 2.897761764139392, 0.03289897191015132, 0.10482695847506603, 0.17386468866432586, 0.25128259545718895, 0.3303497372717449, 0.4200416092071871, 0.5260271428704675, 0.6395639079728932, 0.772100097216132, 0.9355287486825147, 1.131157059966633, 1.4077160085182976, 1.8480335178934275, 3.0660730236950897, 0.043473994283616306, 0.11794578581351889, 0.187832183861837, 0.26018102236808094, 0.34237858028941104, 0.43248346541619154, 0.5373074778961459, 0.6562938238376258, 0.7960432199879564, 0.9579090996294661, 1.1669891466026183, 1.4649032301481408, 1.8843281420895983, 2.790469305013637, 0.02884934475439589, 0.0904307458852165, 0.15710970760645662, 0.2283726633685768, 0.3055983049112543, 0.39302503521355253, 0.48856281653346045, 0.5990415151015707, 0.7292343767825076, 0.8793014693490452, 1.0639092278857278, 1.298242004556941, 1.6280013498349801, 2.182062112963757, 4.883010594086139, 0.08498068036770048, 0.19875157425419476, 0.32189515718597217, 0.47568479837297306, 0.6687094328361659, 0.9612646072236453, 1.3756184021635798, 1.7664601752981732, 2.6829354833224084, 0.028759298782866264, 0.09556913284427772, 0.16554447451554966, 0.24481229173579033, 0.3320900861980616, 0.4320177716604342, 0.5441270910768017, 0.6713739827331882, 0.8234172493905084, 1.0117263582981688, 1.3086720056662922, 1.6787254976139014, 2.3340955275605277, 0.010528844441250084, 0.07651369941993288, 0.14620730426723888, 0.22216373424364733, 0.3050666860501295, 0.39580464523286535, 0.5006710162815251, 0.6179580403103159, 0.7580390767583294, 0.9233557469303483, 1.132556148143456, 1.414886840430353, 1.8464866988953055, 2.896704141886466, 0.03597799434593626, 0.10395456895358479, 0.17555366229153418, 0.25567624856388427, 0.34273428331176914, 0.4384241410283236, 0.5458286851559934, 0.6732542077081406, 0.8187294932465241],
            [1.6426883638707603, 0.24438018975522946, 0.2987593187598013, 0.3384438446720493, 0.3778762777997182, 0.4199060645725806, 0.46437743055847114, 0.5103887352871572, 0.5598729928216551, 0.6134447507245012, 0.6709435880839485, 0.7309154185144222, 0.7944109804217231, 0.8696545774795101, 0.9531094131428018, 1.0470193933536178, 1.1559182063425402, 1.2990207371342823, 1.4730132299871128, 1.7007495340999654, 2.055816060344933, 2.8771958176202714, 0.012441747066421462, 0.03855301864573076, 0.061298240442650295, 0.08472254596737507, 0.11149925150826347, 0.13688682620709502, 0.16178818545157903, 0.18923408206109485, 0.21770668905496965, 0.24770696960756294, 0.2793353091100018, 0.3125725899250708, 0.346965773041428, 0.3819983819612019, 0.4214538490244367, 0.46071048207766085, 0.5015821853511422, 0.5481568220865642, 0.5980521246720669, 0.6522358155835732, 0.7106552332364531, 0.7763931812885443, 0.8471135702535687, 0.925796662110868, 1.015479304659421, 1.1221842173314736, 1.2459618291989063, 1.4002107623915245, 1.6212484183860116, 2.0039680549282233, 2.841017248445479, 0.013063096036475633, 0.03637201641248316, 0.05963481198548082, 0.08340757718038073, 0.10774665886573684, 0.13368363344266448, 0.16490017281737024, 0.19237969034438085, 0.22128795725348466, 0.2513622505415289, 0.2832165712176302, 0.316082608866362, 0.35080341837449014, 0.3872831073322044, 0.42606289811670683, 0.46663944391210044, 0.5110584306820435, 0.5579022158990822, 0.608742891497235, 0.6636137613757103, 0.7360525043902194, 0.801034465024955, 0.8748413090176967, 0.959122824838951, 1.0493233974099363, 1.1599384384147564, 1.2923769530332196, 1.4598642931852661, 1.6826451767660755, 2.0155413049071544, 2.7036766648370705, 0.009517333608995525, 0.03184064881881786, 0.0550167592803452, 0.0780708636757767, 0.10227923704428583, 0.1326376955268734, 0.15983351574366833, 0.18748071734417407, 0.2160500510661567, 0.24608737543515408, 0.27763712561093457, 0.3101642825130255, 0.3446839062550873, 0.381421774624391, 0.41949962669686164],
            2,
            False,
            ExponentialClass(lambdaValue=1.5),
            ExponentialClass(lambdaValue=1.2)
        )

        s3 = Server_Sequential(
            2,
            "Serie",
            "Exponencial",
            "Exponencial",
            "Si",
            10,
            [0.8269462191579571, 0.239525767902085, 0.3823231780462657, 0.49944704482097935, 0.6245144644559243, 0.7572783680059306, 0.9323915072507146, 1.1379815570619316, 1.4291154789104101, 1.8925874211041058, 2.897761764139392, 0.03289897191015132, 0.10482695847506603, 0.17386468866432586, 0.25128259545718895, 0.3303497372717449, 0.4200416092071871, 0.5260271428704675, 0.6395639079728932, 0.772100097216132, 0.9355287486825147, 1.131157059966633, 1.4077160085182976, 1.8480335178934275, 3.0660730236950897, 0.043473994283616306, 0.11794578581351889, 0.187832183861837, 0.26018102236808094, 0.34237858028941104, 0.43248346541619154, 0.5373074778961459, 0.6562938238376258, 0.7960432199879564, 0.9579090996294661, 1.1669891466026183, 1.4649032301481408, 1.8843281420895983, 2.790469305013637, 0.02884934475439589, 0.0904307458852165, 0.15710970760645662, 0.2283726633685768, 0.3055983049112543, 0.39302503521355253, 0.48856281653346045, 0.5990415151015707, 0.7292343767825076, 0.8793014693490452, 1.0639092278857278, 1.298242004556941, 1.6280013498349801, 2.182062112963757, 4.883010594086139, 0.08498068036770048, 0.19875157425419476, 0.32189515718597217, 0.47568479837297306, 0.6687094328361659, 0.9612646072236453, 1.3756184021635798, 1.7664601752981732, 2.6829354833224084, 0.028759298782866264, 0.09556913284427772, 0.16554447451554966, 0.24481229173579033, 0.3320900861980616, 0.4320177716604342, 0.5441270910768017, 0.6713739827331882, 0.8234172493905084, 1.0117263582981688, 1.3086720056662922, 1.6787254976139014, 2.3340955275605277, 0.010528844441250084, 0.07651369941993288, 0.14620730426723888, 0.22216373424364733, 0.3050666860501295, 0.39580464523286535, 0.5006710162815251, 0.6179580403103159, 0.7580390767583294, 0.9233557469303483, 1.132556148143456, 1.414886840430353, 1.8464866988953055, 2.896704141886466, 0.03597799434593626, 0.10395456895358479, 0.17555366229153418, 0.25567624856388427, 0.34273428331176914, 0.4384241410283236, 0.5458286851559934, 0.6732542077081406, 0.8187294932465241],
            [1.6426883638707603, 0.24438018975522946, 0.2987593187598013, 0.3384438446720493, 0.3778762777997182, 0.4199060645725806, 0.46437743055847114, 0.5103887352871572, 0.5598729928216551, 0.6134447507245012, 0.6709435880839485, 0.7309154185144222, 0.7944109804217231, 0.8696545774795101, 0.9531094131428018, 1.0470193933536178, 1.1559182063425402, 1.2990207371342823, 1.4730132299871128, 1.7007495340999654, 2.055816060344933, 2.8771958176202714, 0.012441747066421462, 0.03855301864573076, 0.061298240442650295, 0.08472254596737507, 0.11149925150826347, 0.13688682620709502, 0.16178818545157903, 0.18923408206109485, 0.21770668905496965, 0.24770696960756294, 0.2793353091100018, 0.3125725899250708, 0.346965773041428, 0.3819983819612019, 0.4214538490244367, 0.46071048207766085, 0.5015821853511422, 0.5481568220865642, 0.5980521246720669, 0.6522358155835732, 0.7106552332364531, 0.7763931812885443, 0.8471135702535687, 0.925796662110868, 1.015479304659421, 1.1221842173314736, 1.2459618291989063, 1.4002107623915245, 1.6212484183860116, 2.0039680549282233, 2.841017248445479, 0.013063096036475633, 0.03637201641248316, 0.05963481198548082, 0.08340757718038073, 0.10774665886573684, 0.13368363344266448, 0.16490017281737024, 0.19237969034438085, 0.22128795725348466, 0.2513622505415289, 0.2832165712176302, 0.316082608866362, 0.35080341837449014, 0.3872831073322044, 0.42606289811670683, 0.46663944391210044, 0.5110584306820435, 0.5579022158990822, 0.608742891497235, 0.6636137613757103, 0.7360525043902194, 0.801034465024955, 0.8748413090176967, 0.959122824838951, 1.0493233974099363, 1.1599384384147564, 1.2923769530332196, 1.4598642931852661, 1.6826451767660755, 2.0155413049071544, 2.7036766648370705, 0.009517333608995525, 0.03184064881881786, 0.0550167592803452, 0.0780708636757767, 0.10227923704428583, 0.1326376955268734, 0.15983351574366833, 0.18748071734417407, 0.2160500510661567, 0.24608737543515408, 0.27763712561093457, 0.3101642825130255, 0.3446839062550873, 0.381421774624391, 0.41949962669686164],
            None,
            False,
            ExponentialClass(lambdaValue=1.5),
            ExponentialClass(lambdaValue=1.1)
        )


        server_list = [s1,s2,s3]



        sim = Simulation(server_list=server_list)
        

        while sim.clock <= 100 :
        #for i in range(1,30):
            sim.time_advance() 


        num_arrivals = 0
        number_in_queue = 0
        lost_customers = 0
        user_finished = 0
        num_arrivals = sim.server_list[0].num_arrivals
        for s in sim.server_list:
            number_in_queue += s.num_in_queue
            lost_customers += s.n_lost
            user_finished += s.user_finished
        
        
        t = []
        final_arr_column = []
        final_arr_result = []

        total_wait_time=0
        for s in sim.server_list:
            if(s.configuration == 'Serie'):
                op1 = s.num_of_departures/s.dep_sum
                op2 = s.dep_sum / sim.clock
                
                final_arr_column.append('Average service time server '+str(s.index))
                final_arr_result.append(op1)
                t.append(['Average service time server '+str(s.index),op1])

                final_arr_column.append('Utilization server '+str(s.index))
                final_arr_result.append(op2)
                t.append(['Utilization server '+str(s.index),op2])

                total_wait_time+=s.dep_sum


            else:
                op1_t1 = s.num_of_departures1/s.dep_sum1
                op2_t1 = s.dep_sum1 / sim.clock
                
                final_arr_column.append('Average service time server T1 S')
                final_arr_result.append(op1_t1)
                t.append(['Average service time server T1 S', op1_t1])

                final_arr_column.append('Utilization server T1 S')
                final_arr_result.append(op2_t1)
                t.append(['Utilization server T1 S', op2_t1])

                op1_t2 = s.num_of_departures2/s.dep_sum2
                op2_t2 = s.dep_sum2 / sim.clock

                final_arr_column.append('Average service time server T2 S')
                final_arr_result.append(op1_t2)
                t.append(['Average service time server T2 S', op1_t2])

                final_arr_column.append('Utilization server T2 S')
                final_arr_result.append(op2_t2)
                t.append(['Utilization server T2 S',op2_t2])

                total_wait_time+=s.dep_sum1
                total_wait_time+=s.dep_sum2

        final_arr_column.append('Average interarrival time')
        final_arr_result.append(sim.clock/num_arrivals)
        t.append(['Average interarrival time',sim.clock/num_arrivals])

        final_arr_column.append('People who had to wait in line')
        final_arr_result.append(number_in_queue)
        t.append(['People who had to wait in line', number_in_queue])

        final_arr_column.append('Total average wait time')
        final_arr_result.append(total_wait_time)
        t.append(['Total average wait time', total_wait_time])

        final_arr_column.append('Lost Customers')
        final_arr_result.append(lost_customers)
        t.append(['Lost Customers', lost_customers])

        print("Columns of pandas are: ", final_arr_column)
        print("Values of columns are: ", final_arr_result)
        print("COLUMN LENGTH = ", len(final_arr_column))
        print("VALUES LENGTH = ", len(final_arr_result))

        print("-----------")
        print("This is the final arr merged with data: ")
        print(t)
        print("-----------")

        print("FINAL DATA IS:")
        print("[num_arrivals: %s, number_in_queue: %s, total_wait_time: %s, users_finished: %s, lost_customers: %s"%(num_arrivals, number_in_queue, total_wait_time, user_finished, lost_customers))
        
        df=pd.DataFrame(columns=final_arr_column)

        a=pd.Series(final_arr_result,index=df.columns)
            
        df=df.append(a,ignore_index=True)   
            
        df.to_excel('results3.xlsx')
    

test = Test()