import numpy as np
import pandas as pd
from main import Server_Sequential, Server_Parallel, Server

class Bank_Simulation:
    def __init__(self): 
        
        self.num_arrivals=0                 #total number of arrivals
        
        self.t_departure1=float('inf')      #departure time from server 1
        self.t_departure2=float('inf')      #departure time from server 2
        self.dep_sum1=0                     #Sum of service times by teller 1
        self.dep_sum2=0                     #Sum of service times by teller 2
        self.state_T1=0                     #current state of server1 (binary)
        self.state_T2=0                     #current state of server2 (binary)
        self.total_wait_time=0.0            #total wait time
        
        self.number_in_queue=0              #customers who had to wait in line(counter)
        self.num_of_departures1=0           #number of customers served by teller 1  
        self.num_of_departures2=0           #number of customers served by teller 2 
        self.lost_customers=0               #customers who left without service
        self.num_in_system =0

        s1 = Server_Sequential(
            0,
            "Serie",
            "Exponencial",
            "Exponencial",
            "Si",
            12,
            [0.42517370703259294, 0.09726336864039875, 0.23955661130338748, 0.3360671398138247, 0.43208777839163753, 0.5374303390858318, 0.655690310815838, 0.7991153737088363, 0.9638570167369047, 1.1808860355858306, 1.4509442759425188, 1.8569303015070016, 2.66107207964126, 0.02245230585891572, 0.09262092049076234, 0.1574317455400764, 0.2290238760467772, 0.30934184648142216, 0.4004253587974034, 0.4991665700972886, 0.6141251017955583, 0.7442947808164402, 0.8950908323274944, 1.079338834542725, 1.321637578281982, 1.6466517552307296, 2.2826053430988216, 0.002569909445346255, 0.059783762461934856, 0.12303708882532848, 0.19276190627766726, 0.26731023340702476, 0.34985327442908015, 0.439676623613196, 0.5424879432787199, 0.6582966962122425, 0.8096574854364706, 0.9743242705027041, 1.1754869671838832, 1.443561708640214, 1.8525014004053661, 2.682427438102107, 0.023361752090408562, 0.08468257716183517, 0.14723436085059546, 0.2210495355351889, 0.29472948025392337, 0.3861192289532167, 0.4848849892178841, 0.5867468135471263, 0.7100174178646611, 0.8550151715548697, 1.0329194830853967, 1.26154164964056, 1.545524175778657, 2.0105203935762006, 3.180032087728349, 0.0393218231123653, 0.10169715132070481, 0.18060145625375126, 0.25455176807260144, 0.33590438122293975, 0.4378951105635477, 0.6197793383348881, 0.846179517587548, 1.459481562654753, 2.4072865291284775, 0.04849853722248575, 0.15418694880374215, 0.23066800480730237, 0.42144496825417177, 0.5621578792954229, 0.7036151207949806, 1.0871232232841739, 1.4973417530803805, 0.0716063277677363, 0.1520381684211708, 0.22629111786924733, 0.3316664094044164, 0.4799687844330706, 0.667127983610303, 0.9207634686533961, 1.2550319755273058, 1.5750652617534888, 2.055351858554964, 3.4394588050432393, 0.0439049604691819, 0.10858185314563211, 0.18118077738544427, 0.26848997058260876, 0.415825820357439, 0.5839600041089043, 0.8069419575386998, 1.1419868015454948, 1.7002809111604322, 3.6112500614000442, 0.16344726291422726, 0.26611550384769084, 0.41537296373104654],
            [1.548605591516429, 0.27810896340840435, 0.3480313868703567, 0.40563262472085115, 0.4594440619488181, 0.5154689955977658, 0.574719809759953, 0.6400273620122111, 0.7077115453455984, 0.7927485055804825, 0.8817659349120341, 1.0286097896779032, 1.2484442707853685, 1.6120066617089963, 2.2323539735849276, 0.0027792971728855575, 0.03537141200156045, 0.06655334482853272, 0.09572060587624892, 0.12618474816897693, 0.15661482376506203, 0.1899142922096002, 0.2241902994037247, 0.2606098762250818, 0.2991672767863743, 0.34089228189758775, 0.38945312081968797, 0.43867015520941144, 0.4899601084084944, 0.5459887981126125, 0.6065525765237211, 0.6727722289325591, 0.7457590708310438, 0.8289050573653807, 0.9245656233267514, 1.036289726873072, 1.1818830594222518, 1.3552253396086753, 1.5817174158380252, 1.9288813118232735, 2.723937664973704, 0.014475151163919038, 0.04110603384041101, 0.06916919496833401, 0.09668399326062566, 0.1271553291681622, 0.1581597231004328, 0.19133677380842862, 0.2264862355833459, 0.26422045364960356, 0.30323186238325883, 0.3443713460211076, 0.3886752959460114, 0.43526182004339375, 0.4853500291318145, 0.5377303636182208, 0.5974373580331478, 0.6591547234942047, 0.7313491771388768, 0.9243533146943979, 1.0453093983889215, 1.175305994350912, 1.3438815951714815, 1.5680277547072947, 1.9146076483588355, 2.651592230550503, 0.01292973324448024, 0.039586291055939894, 0.06753222475157328, 0.09645983338497702, 0.12626458757340053, 0.15760982539109714, 0.18883062171122783, 0.2286356939213943, 0.26593524893184955, 0.303255142996662, 0.3450348924684555, 0.3890102919144567, 0.436333497660955, 0.48774051006254904, 0.5434806198913559, 0.6036773071712531, 0.6696259000101269, 0.7442701943653978, 0.8285553229782157, 0.9229942880481306, 1.0264772725349651, 1.1559653529188036, 1.3169689331145908, 1.530293504462927, 1.8314042420017649, 2.395490241827876, 0.007192295087955767, 0.033676203472868455, 0.06076417535345444, 0.08910094575723282, 0.11882678458940577, 0.1500055095654636, 0.18313987736967954],
            1,
            False
        )

        s2 = Server_Sequential(
            1,
            "Serie",
            "Exponencial",
            "Exponencial",
            "Si",
            10,
            [0.8269462191579571, 0.239525767902085, 0.3823231780462657, 0.49944704482097935, 0.6245144644559243, 0.7572783680059306, 0.9323915072507146, 1.1379815570619316, 1.4291154789104101, 1.8925874211041058, 2.897761764139392, 0.03289897191015132, 0.10482695847506603, 0.17386468866432586, 0.25128259545718895, 0.3303497372717449, 0.4200416092071871, 0.5260271428704675, 0.6395639079728932, 0.772100097216132, 0.9355287486825147, 1.131157059966633, 1.4077160085182976, 1.8480335178934275, 3.0660730236950897, 0.043473994283616306, 0.11794578581351889, 0.187832183861837, 0.26018102236808094, 0.34237858028941104, 0.43248346541619154, 0.5373074778961459, 0.6562938238376258, 0.7960432199879564, 0.9579090996294661, 1.1669891466026183, 1.4649032301481408, 1.8843281420895983, 2.790469305013637, 0.02884934475439589, 0.0904307458852165, 0.15710970760645662, 0.2283726633685768, 0.3055983049112543, 0.39302503521355253, 0.48856281653346045, 0.5990415151015707, 0.7292343767825076, 0.8793014693490452, 1.0639092278857278, 1.298242004556941, 1.6280013498349801, 2.182062112963757, 4.883010594086139, 0.08498068036770048, 0.19875157425419476, 0.32189515718597217, 0.47568479837297306, 0.6687094328361659, 0.9612646072236453, 1.3756184021635798, 1.7664601752981732, 2.6829354833224084, 0.028759298782866264, 0.09556913284427772, 0.16554447451554966, 0.24481229173579033, 0.3320900861980616, 0.4320177716604342, 0.5441270910768017, 0.6713739827331882, 0.8234172493905084, 1.0117263582981688, 1.3086720056662922, 1.6787254976139014, 2.3340955275605277, 0.010528844441250084, 0.07651369941993288, 0.14620730426723888, 0.22216373424364733, 0.3050666860501295, 0.39580464523286535, 0.5006710162815251, 0.6179580403103159, 0.7580390767583294, 0.9233557469303483, 1.132556148143456, 1.414886840430353, 1.8464866988953055, 2.896704141886466, 0.03597799434593626, 0.10395456895358479, 0.17555366229153418, 0.25567624856388427, 0.34273428331176914, 0.4384241410283236, 0.5458286851559934, 0.6732542077081406, 0.8187294932465241],
            [1.6426883638707603, 0.24438018975522946, 0.2987593187598013, 0.3384438446720493, 0.3778762777997182, 0.4199060645725806, 0.46437743055847114, 0.5103887352871572, 0.5598729928216551, 0.6134447507245012, 0.6709435880839485, 0.7309154185144222, 0.7944109804217231, 0.8696545774795101, 0.9531094131428018, 1.0470193933536178, 1.1559182063425402, 1.2990207371342823, 1.4730132299871128, 1.7007495340999654, 2.055816060344933, 2.8771958176202714, 0.012441747066421462, 0.03855301864573076, 0.061298240442650295, 0.08472254596737507, 0.11149925150826347, 0.13688682620709502, 0.16178818545157903, 0.18923408206109485, 0.21770668905496965, 0.24770696960756294, 0.2793353091100018, 0.3125725899250708, 0.346965773041428, 0.3819983819612019, 0.4214538490244367, 0.46071048207766085, 0.5015821853511422, 0.5481568220865642, 0.5980521246720669, 0.6522358155835732, 0.7106552332364531, 0.7763931812885443, 0.8471135702535687, 0.925796662110868, 1.015479304659421, 1.1221842173314736, 1.2459618291989063, 1.4002107623915245, 1.6212484183860116, 2.0039680549282233, 2.841017248445479, 0.013063096036475633, 0.03637201641248316, 0.05963481198548082, 0.08340757718038073, 0.10774665886573684, 0.13368363344266448, 0.16490017281737024, 0.19237969034438085, 0.22128795725348466, 0.2513622505415289, 0.2832165712176302, 0.316082608866362, 0.35080341837449014, 0.3872831073322044, 0.42606289811670683, 0.46663944391210044, 0.5110584306820435, 0.5579022158990822, 0.608742891497235, 0.6636137613757103, 0.7360525043902194, 0.801034465024955, 0.8748413090176967, 0.959122824838951, 1.0493233974099363, 1.1599384384147564, 1.2923769530332196, 1.4598642931852661, 1.6826451767660755, 2.0155413049071544, 2.7036766648370705, 0.009517333608995525, 0.03184064881881786, 0.0550167592803452, 0.0780708636757767, 0.10227923704428583, 0.1326376955268734, 0.15983351574366833, 0.18748071734417407, 0.2160500510661567, 0.24608737543515408, 0.27763712561093457, 0.3101642825130255, 0.3446839062550873, 0.381421774624391, 0.41949962669686164],
            2,
            False
        )

        s3 = Server_Sequential(
            2,
            "Serie",
            "Exponencial",
            "Exponencial",
            "Si",
            7,
            [0.8269462191579571, 0.239525767902085, 0.3823231780462657, 0.49944704482097935, 0.6245144644559243, 0.7572783680059306, 0.9323915072507146, 1.1379815570619316, 1.4291154789104101, 1.8925874211041058, 2.897761764139392, 0.03289897191015132, 0.10482695847506603, 0.17386468866432586, 0.25128259545718895, 0.3303497372717449, 0.4200416092071871, 0.5260271428704675, 0.6395639079728932, 0.772100097216132, 0.9355287486825147, 1.131157059966633, 1.4077160085182976, 1.8480335178934275, 3.0660730236950897, 0.043473994283616306, 0.11794578581351889, 0.187832183861837, 0.26018102236808094, 0.34237858028941104, 0.43248346541619154, 0.5373074778961459, 0.6562938238376258, 0.7960432199879564, 0.9579090996294661, 1.1669891466026183, 1.4649032301481408, 1.8843281420895983, 2.790469305013637, 0.02884934475439589, 0.0904307458852165, 0.15710970760645662, 0.2283726633685768, 0.3055983049112543, 0.39302503521355253, 0.48856281653346045, 0.5990415151015707, 0.7292343767825076, 0.8793014693490452, 1.0639092278857278, 1.298242004556941, 1.6280013498349801, 2.182062112963757, 4.883010594086139, 0.08498068036770048, 0.19875157425419476, 0.32189515718597217, 0.47568479837297306, 0.6687094328361659, 0.9612646072236453, 1.3756184021635798, 1.7664601752981732, 2.6829354833224084, 0.028759298782866264, 0.09556913284427772, 0.16554447451554966, 0.24481229173579033, 0.3320900861980616, 0.4320177716604342, 0.5441270910768017, 0.6713739827331882, 0.8234172493905084, 1.0117263582981688, 1.3086720056662922, 1.6787254976139014, 2.3340955275605277, 0.010528844441250084, 0.07651369941993288, 0.14620730426723888, 0.22216373424364733, 0.3050666860501295, 0.39580464523286535, 0.5006710162815251, 0.6179580403103159, 0.7580390767583294, 0.9233557469303483, 1.132556148143456, 1.414886840430353, 1.8464866988953055, 2.896704141886466, 0.03597799434593626, 0.10395456895358479, 0.17555366229153418, 0.25567624856388427, 0.34273428331176914, 0.4384241410283236, 0.5458286851559934, 0.6732542077081406, 0.8187294932465241],
            [1.6426883638707603, 0.24438018975522946, 0.2987593187598013, 0.3384438446720493, 0.3778762777997182, 0.4199060645725806, 0.46437743055847114, 0.5103887352871572, 0.5598729928216551, 0.6134447507245012, 0.6709435880839485, 0.7309154185144222, 0.7944109804217231, 0.8696545774795101, 0.9531094131428018, 1.0470193933536178, 1.1559182063425402, 1.2990207371342823, 1.4730132299871128, 1.7007495340999654, 2.055816060344933, 2.8771958176202714, 0.012441747066421462, 0.03855301864573076, 0.061298240442650295, 0.08472254596737507, 0.11149925150826347, 0.13688682620709502, 0.16178818545157903, 0.18923408206109485, 0.21770668905496965, 0.24770696960756294, 0.2793353091100018, 0.3125725899250708, 0.346965773041428, 0.3819983819612019, 0.4214538490244367, 0.46071048207766085, 0.5015821853511422, 0.5481568220865642, 0.5980521246720669, 0.6522358155835732, 0.7106552332364531, 0.7763931812885443, 0.8471135702535687, 0.925796662110868, 1.015479304659421, 1.1221842173314736, 1.2459618291989063, 1.4002107623915245, 1.6212484183860116, 2.0039680549282233, 2.841017248445479, 0.013063096036475633, 0.03637201641248316, 0.05963481198548082, 0.08340757718038073, 0.10774665886573684, 0.13368363344266448, 0.16490017281737024, 0.19237969034438085, 0.22128795725348466, 0.2513622505415289, 0.2832165712176302, 0.316082608866362, 0.35080341837449014, 0.3872831073322044, 0.42606289811670683, 0.46663944391210044, 0.5110584306820435, 0.5579022158990822, 0.608742891497235, 0.6636137613757103, 0.7360525043902194, 0.801034465024955, 0.8748413090176967, 0.959122824838951, 1.0493233974099363, 1.1599384384147564, 1.2923769530332196, 1.4598642931852661, 1.6826451767660755, 2.0155413049071544, 2.7036766648370705, 0.009517333608995525, 0.03184064881881786, 0.0550167592803452, 0.0780708636757767, 0.10227923704428583, 0.1326376955268734, 0.15983351574366833, 0.18748071734417407, 0.2160500510661567, 0.24608737543515408, 0.27763712561093457, 0.3101642825130255, 0.3446839062550873, 0.381421774624391, 0.41949962669686164],
            None,
            False
        )

        self.server_list = [s1,s2,s3]

        # Esquema test 1, con 100 usuarios/eventos
        # inicio---(cola_espera_1)---[servidor_1]---(cola_espera_2)---[servidor_2]---(cola_espera_3)---[servidor_3]---fin
        # GLOBAL VARIABLES (Que comparten todos los servidores)
        # self.clock=0.0
        # self.num_arrivals=0                 #total number of arrivals
        # self.t_arrival=self.gen_int_arr()   #time of next arrival
        # self.total_wait_time=0.0            #total wait time
        # self.num_in_q=0                     #current number in queue
        # self.number_in_queue=0              #customers who had to wait in line(counter)
        # self.lost_customers=0               #customers who left without service
        # self.num_in_system =0

        self.clock=0.0                      
        self.t_arrival=self.gen_int_arr()
        self.num_in_q=0                  


        # ARRAY VARIABLES (Que debe tener cada servidor)
        # self.t_departure1=float('inf')
        # self.dep_sum1=0  
        # self.state_T1=0
        # self.num_of_departures1

        self.time_departures = []
        self.departures_sum = []
        self.states = []
        self.num_of_departures = []

        for s in self.server_list:
            self.time_departures[s.index] = float("inf")
            self.departures_sum[s.index] = 0
            self.states[s.index] = 0
            self.num_of_departures[s.index] = 0

        


    def time_adv(self):
        t_array = self.time_departures.insert(0,self.t_arrival)
        t2_next_event = min(t_array)    
        self.total_wait_time += (self.num_in_q*(t2_next_event-self.clock))  
        self.clock=t2_next_event
        
        #t_next_event=min(self.t_arrival,self.t_departure1,self.t_departure2)  
        #self.total_wait_time += (self.num_in_q*(t_next_event-self.clock))
        #self.clock=t_next_event
                
        if self.t_arrival<self.t_departure1 and self.t_arrival<self.t_departure2:
            self.arrival()
        elif self.t_departure1<self.t_arrival and self.t_departure1<self.t_departure2:
            self.teller1()
        else:
            self.teller2()

    def arrival(self):              
        self.num_arrivals += 1
        self.num_in_system += 1

        if self.num_in_q == 0:                                 #schedule next departure or arrival depending on state of servers
            if self.state_T1==1 and self.state_T2==1:
                self.num_in_q+=1
                self.number_in_queue+=1
                self.t_arrival=self.clock+self.gen_int_arr()
                
                
            elif self.state_T1==0 and self.state_T2==0:
                
                if np.random.choice([0,1])==1:
                    self.state_T1=1
                    self.dep1= self.gen_service_time_teller1()
                    self.dep_sum1 += self.dep1
                    self.t_departure1=self.clock + self.dep1
                    self.t_arrival=self.clock+self.gen_int_arr()

                else:
                    self.state_T2=1
                    self.dep2= self.gen_service_time_teller2()
                    self.dep_sum2 += self.dep2
                    self.t_departure2=self.clock + self.dep2
                    self.t_arrival=self.clock+self.gen_int_arr()

                    
            elif self.state_T1==0 and self.state_T2 ==1:       #if server 2 is busy customer goes to server 1
                self.dep1= self.gen_service_time_teller1()
                self.dep_sum1 += self.dep1
                self.t_departure1=self.clock + self.dep1
                self.t_arrival=self.clock+self.gen_int_arr()
                self.state_T1=1
            else:                                              #otherwise customer goes to server 2
                self.dep2= self.gen_service_time_teller2()
                self.dep_sum2 += self.dep2
                self.t_departure2=self.clock + self.dep2
                self.t_arrival=self.clock+self.gen_int_arr()
                self.state_T2=1
        
        elif self.num_in_q < 4 and self.num_in_q >= 1:       #if queue length is less than 4 generate next arrival and make customer join queue
            self.num_in_q+=1
            self.number_in_queue+=1                             
            self.t_arrival=self.clock + self.gen_int_arr()
            
        elif self.num_in_q == 4:                             #if queue length is 4 equal prob to leave or stay
            if np.random.choice([0,1])==0: 
                self.num_in_q+=1 
                self.number_in_queue+=1                 
                self.t_arrival=self.clock + self.gen_int_arr()
            else:
                self.lost_customers+=1
                
                
        elif self.num_in_q >= 5:                            #if queue length is more than 5 60% chance of leaving
            if np.random.choice([0,1],p=[0.4,0.6])==0:
                self.t_arrival=self.clock+self.gen_int_arr()
                self.num_in_q+=1 
                self.number_in_queue+=1 
            else:
                self.lost_customers+=1

    def teller1(self):                #departure from server 2
        self.num_of_departures1 += 1
        if self.num_in_q>0:
            self.dep1= self.gen_service_time_teller1()
            self.dep_sum1 += self.dep1
            self.t_departure1=self.clock + self.dep1
            self.num_in_q-=1
        else:
            self.t_departure1=float('inf') 
            self.state_T1=0                  
    
    def teller2(self):                #departure from server 1
        self.num_of_departures2 += 1
        if self.num_in_q>0:
            self.dep2= self.gen_service_time_teller2()
            self.dep_sum2 += self.dep2
            self.t_departure2=self.clock + self.dep2
            self.num_in_q-=1
        else:
            self.t_departure2=float('inf')
            self.state_T2=0

    def gen_int_arr(self):                                             #function to generate arrival times using inverse trnasform
        return (-np.log(1-(np.random.uniform(low=0.0,high=1.0))) * 3)
    
    def gen_service_time_teller1(self):                                #function to generate service time for teller 1 using inverse trnasform
        return (-np.log(1-(np.random.uniform(low=0.0,high=1.0))) * 1.2)
    
    def gen_service_time_teller2(self):                                #function to generate service time for teller 1 using inverse trnasform
        return (-np.log(1-(np.random.uniform(low=0.0,high=1.0))) * 1.5)
        





s=Bank_Simulation()
df=pd.DataFrame(columns=['Average interarrival time','Average service time teller1','Average service time teller 2','Utilization teller 1','Utilization teller 2','People who had to wait in line','Total average wait time','Lost Customers'])


for i in range(100):
    np.random.seed(i)
    s.__init__()
    while s.clock <= 240 :
        s.time_adv() 
    a=pd.Series([s.clock/s.num_arrivals,s.dep_sum1/s.num_of_departures1,s.dep_sum2/s.num_of_departures2,s.dep_sum1/s.clock,s.dep_sum2/s.clock,s.number_in_queue,s.total_wait_time,s.lost_customers],index=df.columns)
    df=df.append(a,ignore_index=True)   
    
df.to_excel('results.xlsx')